Cloudfoundry is an extensible platform. Managed services can easily be plugged in and 
made available in the services marketplace.

Create a MongoDB Service Broker
--------------------------------------

This broker is implemented with Spring Boot, and leverages the Cloud Foundry Service
Broker project.

Implement Catalog Management
-------------------------------------

The first endpoint that a platform will interact with on the broker is the service catalog
(/v2/catalog). This endpoint returns a list of all services available on the broker.

Ref: https://github.com/making/spring-cloud-cloudfoundry-service-broker/blob/master/
src/main/java/org/springframework/cloud/servicebroker/controller/CatalogController.java


We have an endpoint, but the Spring Cloud Service Broker can’t provide all the implementation. We need
to describe our catalog. To to that, all we need to do is provide a Catalog bean.

Ref: org.springframework.cloud.servicebroker.mongodb.config.CatalogConfig

Practice:
----------

1. Push the mongodb-service-broker application.
cf push mongodb-service-broker -p cloudfoundry-mongodb-service-broker.jar -m 768M --random-route --no-start

2. Set environment variables.
$ cf set-env mongodb-service-broker SERVICE_ID mongodb-service-broker-kvr
$ cf set-env mongodb-service-broker SERVICE_NAME MongoDB-kvr
$ cf set-env mongodb-service-broker PLAN_ID mongo-plan-kvr

3. Start mongodb-service-broker
cf start mongodb-service-broker

4. Access the application from the browserr
https://mongodb-service-broker-?/v2/catalog
Username: pivotal
Password: keepitsimple

Register the Service Broker
-------------------------------

We will be creating a Space-Scoped broker. Space-Scoped brokers help you during the 
development/testing of your service broker, because they are private to a space and 
don’t require an admin to enable access (list it in the marketplace, provision service 
instances, etc).

5. A unique broker name is required. Use your initials.
cf create-service-broker mongodb-service-broker-{{initials}} pivotal keepitsimple {{service_broker_app_url}} --space-scoped

ex: cf create-service-broker mongodb-service-broker-kvr pivotal keepitsimple https://mongodb-service-broker-brash-tasmaniandevil.cfapps.io --space-scoped

6. View the Service Brokers
cf service-brokers

7. Verify that your service is listed in the marketplace.
cf marketplace


Implement Provisioning and Deprovisioning
-------------------------------------------------

1. Provisioning Code:

org.springframework.cloud.servicebroker.mongodb.service.MongoServiceInstanceService

Note : createServiceInstance method is where our broker provisions the database. But to do so two
things must happen:
>  Record details in the broker database that we are provisioning a service instance
 (a MongoDB database)
>  Create the database

2. Deprovisioning Code:

The deleteServiceInstance method is where our broker deprovisions the database. But to 
do so two things must happen:

1. Delete the database
2. Delete the record of the service instance in the broker database


Implement Binding and Unbinding
---------------------------------------

We need to implement binding/unbinding in our mongodb-service-broker application. 
To do so we just need to implement the ServiceInstanceBindingService interface, 
because the Spring Cloud Service Broker project has already done the mapping.

> Binding Code:
org.springframework.cloud.servicebroker.mongodb.service.MongoServiceInstanceBindingService

The createServiceInstanceBinding method is where our broker binds an application to the
provisioned service instance (database). But to do so two things must happen:
1. Create a unique set of credentials for this binding request in MongoDB
2. Create a record of the binding in the broker database.

> Unbinding Code:

The deleteServiceInstanceBinding method is where our broker unbinds an application to
the provisioned service instance (database). But to do so two things must happen:
1. Delete the credentials (user) for this binding request in MongoDB
2. Delete the record of the binding in the broker database

Use the MongoDB Service Broker
-------------------------------------

Configure the mongodb-service-broker application to use a MongoDB instance.
A MongoDB instance can be obtained in the following ways:

1. Use a MongoDB instance in your environment (aws)
2. We need to communicate the mongo db hostname (or ip address) and password that 
the service broker will use via environment variables:
cf set-env mongodb-service-broker MONGODB_HOST {{mongodb_ip}}
..and..
cf set-env mongodb-service-broker MONGODB_PASSWORD {{mongodb_password}}

3. Restart the application.
cf restart mongodb-service-broker

4. Create a MongoDB service instance
cf create-service MongoDB-{{initials}} standard mongo-service

5. Bind the spring-music to mongo-service.
cf bind-service spring-music mongo-service

6. Restart spring-music
cf restart spring-music

7. Refresh spring-music in the browser.

Clean up
----------

1. Delete spring-music.
cf delete spring-music

2. Delete the mongo-service service instance.
cf delete-service mongo-service

3. Delete the service broker.
For example:
cf delete-service-broker mongodb-service-broker-{{initials}}

4. Delete mongodb-service-broker application.
cf delete mongodb-service-broker
 





